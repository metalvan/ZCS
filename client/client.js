// Generated by CoffeeScript 1.6.2
var HeroSprite, Sprite, Zombie, ZombieSprite, Zone, c, h, socket, sprite, z,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

socket = io.connect(window.location.origin);

Zombie = (function() {
  function Zombie() {}

  return Zombie;

})();

Sprite = (function() {
  function Sprite(spriteSheet, width, height) {
    this.spriteSheet = spriteSheet;
    this.width = width;
    this.height = height;
    this.animations = {};
    this.container = $('<div></div>').css({
      width: this.width,
      height: this.height,
      backgroundImage: "url(" + this.spriteSheet + ")"
    });
    this.container.appendTo('body');
  }

  Sprite.prototype.defineAnimation = function(name, speed, start, end, loops) {
    var arr, i, _i;

    arr = [];
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      arr.push(i * this.width);
    }
    return this.animations[name] = {
      speed: speed,
      loops: loops,
      frames: arr
    };
  };

  Sprite.prototype.playAnimation = function(name) {
    var _this = this;

    clearInterval(this.interval);
    this.frame = 0;
    return this.interval = setInterval(function() {
      _this.container.css({
        backgroundPosition: "" + (-_this.animations[name].frames[_this.frame]) + "px " + (_this.evaluateFacing(_this.direction)) + "px"
      });
      _this.frame++;
      if (_this.frame >= _this.animations[name].frames.length) {
        if (_this.animations[name].loops) {
          return _this.frame = 0;
        } else {
          return clearInterval(_this.interval);
        }
      }
    }, this.animations[name].speed);
  };

  Sprite.prototype.evaluateFacing = function(direction) {
    switch (direction) {
      case 'left':
        return 0;
      case 'downleft':
        return 128;
      case 'down':
        return 256;
      case 'downright':
        return 384;
      case 'right':
        return 512;
      case 'upright':
        return 640;
      case 'up':
        return 768;
      case 'upleft':
        return 896;
    }
  };

  return Sprite;

})();

ZombieSprite = (function(_super) {
  __extends(ZombieSprite, _super);

  function ZombieSprite() {
    ZombieSprite.__super__.constructor.call(this, '/sprites/zombie.png', 128, 128);
    this.defineAnimation('stand', 300, 0, 3, true);
    this.defineAnimation('walk', 140, 4, 11, true);
    this.defineAnimation('attack', 140, 12, 21, true);
    this.defineAnimation('die', 140, 22, 27, false);
    this.defineAnimation('crit', 140, 28, 35, false);
  }

  return ZombieSprite;

})(Sprite);

HeroSprite = (function(_super) {
  __extends(HeroSprite, _super);

  function HeroSprite() {
    HeroSprite.__super__.constructor.call(this, '/sprites/skeleton.png', 128, 128);
    this.defineAnimation('stand', 300, 0, 4, true);
    this.defineAnimation('walk', 140, 5, 12, true);
    this.defineAnimation('attack', 100, 13, 20, true);
    this.defineAnimation('die', 140, 21, 27, false);
  }

  return HeroSprite;

})(Sprite);

Zone = (function() {
  function Zone(sprite) {
    var x, xo, y, yo, _i, _j;

    this.sprite = sprite;
    this.canvas = document.createElement('canvas');
    this.canvas.width = 900;
    this.canvas.height = 900;
    this.context = this.canvas.getContext('2d');
    for (x = _i = -1; _i <= 100; x = ++_i) {
      for (y = _j = -1; _j <= 100; y = ++_j) {
        xo = Math.round(Math.random() * 15);
        yo = Math.round(Math.random() * 1);
        this.context.drawImage(this.sprite, 64 * xo, 32 * yo, 64, 32, x * 32, y * 32 - 16 * (x % 2), 64, 32);
      }
    }
  }

  Zone.prototype.drawTo = function(viewCanvas) {
    return viewCanvas.getContext('2d').drawImage(this.canvas, 0, 0);
  };

  return Zone;

})();

z = new ZombieSprite;

z.direction = 'downright';

z.playAnimation('stand');

$('#stand').click(function() {
  return z.playAnimation('stand');
});

$('#walk').click(function() {
  return z.playAnimation('walk');
});

$('#attack').click(function() {
  return z.playAnimation('attack');
});

$('#die').click(function() {
  return z.playAnimation('die');
});

$('#crit').click(function() {
  return z.playAnimation('crit');
});

$('#left').click(function() {
  return z.direction = 'left';
});

$('#upleft').click(function() {
  return z.direction = 'upleft';
});

$('#up').click(function() {
  return z.direction = 'up';
});

$('#upright').click(function() {
  return z.direction = 'upright';
});

$('#right').click(function() {
  return z.direction = 'right';
});

$('#downright').click(function() {
  return z.direction = 'downright';
});

$('#down').click(function() {
  return z.direction = 'down';
});

$('#downleft').click(function() {
  return z.direction = 'downleft';
});

h = new HeroSprite;

h.direction = 'downright';

h.playAnimation('stand');

$('#stand').click(function() {
  return h.playAnimation('stand');
});

$('#walk').click(function() {
  return h.playAnimation('walk');
});

$('#attack').click(function() {
  return h.playAnimation('attack');
});

$('#die').click(function() {
  return h.playAnimation('die');
});

$('#crit').click(function() {
  return h.playAnimation('crit');
});

$('#left').click(function() {
  return h.direction = 'left';
});

$('#upleft').click(function() {
  return h.direction = 'upleft';
});

$('#up').click(function() {
  return h.direction = 'up';
});

$('#upright').click(function() {
  return h.direction = 'upright';
});

$('#right').click(function() {
  return h.direction = 'right';
});

$('#downright').click(function() {
  return h.direction = 'downright';
});

$('#down').click(function() {
  return h.direction = 'down';
});

$('#downleft').click(function() {
  return h.direction = 'downleft';
});

c = $('canvas')[0];

sprite = new Image();

sprite.src = '/sprites/map.png';

sprite.onload = function() {
  var Z;

  Z = new Zone(sprite);
  return Z.drawTo(c);
};
